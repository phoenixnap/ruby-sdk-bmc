=begin
#Bare Metal Cloud API

#Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b> 

The version of the OpenAPI document: 0.1
Contact: support@phoenixnap.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module BmcApi
  class ServersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Removes the server from private network.
    # Removes the server from private network. <b>No actual configuration is performed on the operating system.</b> BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. <b>This is an advanced network action that can make your server completely unavailable over any network. Make sure this server is reachable over remote console for guaranteed access in case of misconfiguration.</b>
    # @param server_id [String] The server&#39;s ID.
    # @param private_network_id [String] The private network identifier.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_private_network(server_id, private_network_id, opts = {})
      data, _status_code, _headers = delete_private_network_with_http_info(server_id, private_network_id, opts)
      data
    end

    # Removes the server from private network.
    # Removes the server from private network. &lt;b&gt;No actual configuration is performed on the operating system.&lt;/b&gt; BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. &lt;b&gt;This is an advanced network action that can make your server completely unavailable over any network. Make sure this server is reachable over remote console for guaranteed access in case of misconfiguration.&lt;/b&gt;
    # @param server_id [String] The server&#39;s ID.
    # @param private_network_id [String] The private network identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def delete_private_network_with_http_info(server_id, private_network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.delete_private_network ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.delete_private_network"
      end
      # verify the required parameter 'private_network_id' is set
      if @api_client.config.client_side_validation && private_network_id.nil?
        fail ArgumentError, "Missing the required parameter 'private_network_id' when calling ServersApi.delete_private_network"
      end
      # resource path
      local_var_path = '/servers/{serverId}/network-configuration/private-network-configuration/private-networks/{privateNetworkId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s)).sub('{' + 'privateNetworkId' + '}', CGI.escape(private_network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.delete_private_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#delete_private_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List servers.
    # List all servers owned by account.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag A list of query parameters related to tags in the form of tagName.tagValue
    # @return [Array<Server>]
    def servers_get(opts = {})
      data, _status_code, _headers = servers_get_with_http_info(opts)
      data
    end

    # List servers.
    # List all servers owned by account.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag A list of query parameters related to tags in the form of tagName.tagValue
    # @return [Array<(Array<Server>, Integer, Hash)>] Array<Server> data, response status code and response headers
    def servers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_get ...'
      end
      # resource path
      local_var_path = '/servers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Server>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new server.
    # Create (request) new server for account. Server DNS will be configured to access Google's public DNS at 8.8.8.8 .
    # @param [Hash] opts the optional parameters
    # @option opts [ServerCreate] :server_create 
    # @return [Server]
    def servers_post(opts = {})
      data, _status_code, _headers = servers_post_with_http_info(opts)
      data
    end

    # Create new server.
    # Create (request) new server for account. Server DNS will be configured to access Google&#39;s public DNS at 8.8.8.8 .
    # @param [Hash] opts the optional parameters
    # @option opts [ServerCreate] :server_create 
    # @return [Array<(Server, Integer, Hash)>] Server data, response status code and response headers
    def servers_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_post ...'
      end
      # resource path
      local_var_path = '/servers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'server_create'])

      # return_type
      return_type = opts[:debug_return_type] || 'Server'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprovision a server.
    # Deprovision the server. Supports advanced deprovision configuration.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RelinquishIpBlock] :relinquish_ip_block 
    # @return [String]
    def servers_server_id_actions_deprovision_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_actions_deprovision_post_with_http_info(server_id, opts)
      data
    end

    # Deprovision a server.
    # Deprovision the server. Supports advanced deprovision configuration.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RelinquishIpBlock] :relinquish_ip_block 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def servers_server_id_actions_deprovision_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_actions_deprovision_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_actions_deprovision_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/actions/deprovision'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'relinquish_ip_block'])

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_actions_deprovision_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_actions_deprovision_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Power off server.
    # Power off specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [ActionResult]
    def servers_server_id_actions_power_off_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_actions_power_off_post_with_http_info(server_id, opts)
      data
    end

    # Power off server.
    # Power off specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionResult, Integer, Hash)>] ActionResult data, response status code and response headers
    def servers_server_id_actions_power_off_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_actions_power_off_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_actions_power_off_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/actions/power-off'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_actions_power_off_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_actions_power_off_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Power on server.
    # Power on specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [ActionResult]
    def servers_server_id_actions_power_on_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_actions_power_on_post_with_http_info(server_id, opts)
      data
    end

    # Power on server.
    # Power on specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionResult, Integer, Hash)>] ActionResult data, response status code and response headers
    def servers_server_id_actions_power_on_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_actions_power_on_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_actions_power_on_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/actions/power-on'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_actions_power_on_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_actions_power_on_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reboot server.
    # Reboot specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [ActionResult]
    def servers_server_id_actions_reboot_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_actions_reboot_post_with_http_info(server_id, opts)
      data
    end

    # Reboot server.
    # Reboot specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionResult, Integer, Hash)>] ActionResult data, response status code and response headers
    def servers_server_id_actions_reboot_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_actions_reboot_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_actions_reboot_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/actions/reboot'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_actions_reboot_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_actions_reboot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reserve server.
    # Reserve specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerReserve] :server_reserve 
    # @return [Server]
    def servers_server_id_actions_reserve_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_actions_reserve_post_with_http_info(server_id, opts)
      data
    end

    # Reserve server.
    # Reserve specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerReserve] :server_reserve 
    # @return [Array<(Server, Integer, Hash)>] Server data, response status code and response headers
    def servers_server_id_actions_reserve_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_actions_reserve_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_actions_reserve_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/actions/reserve'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'server_reserve'])

      # return_type
      return_type = opts[:debug_return_type] || 'Server'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_actions_reserve_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_actions_reserve_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset server.
    # Deprecated: Reset specific server. Reset only supports network configurations of type 'private network' or 'IP blocks'. As an alternative, the suggested action is to deprovision the server and provision a new one with the same configuration.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerReset] :server_reset 
    # @return [ResetResult]
    def servers_server_id_actions_reset_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_actions_reset_post_with_http_info(server_id, opts)
      data
    end

    # Reset server.
    # Deprecated: Reset specific server. Reset only supports network configurations of type &#39;private network&#39; or &#39;IP blocks&#39;. As an alternative, the suggested action is to deprovision the server and provision a new one with the same configuration.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerReset] :server_reset 
    # @return [Array<(ResetResult, Integer, Hash)>] ResetResult data, response status code and response headers
    def servers_server_id_actions_reset_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_actions_reset_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_actions_reset_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/actions/reset'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'server_reset'])

      # return_type
      return_type = opts[:debug_return_type] || 'ResetResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_actions_reset_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_actions_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Shutdown server.
    # Shut down specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [ActionResult]
    def servers_server_id_actions_shutdown_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_actions_shutdown_post_with_http_info(server_id, opts)
      data
    end

    # Shutdown server.
    # Shut down specific server.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionResult, Integer, Hash)>] ActionResult data, response status code and response headers
    def servers_server_id_actions_shutdown_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_actions_shutdown_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_actions_shutdown_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/actions/shutdown'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_actions_shutdown_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_actions_shutdown_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete server.
    # Deprovision specific server. Any IP blocks assigned to this server will also be relinquished and deleted. Deprecated: see /servers/{serverId}/actions/deprovision
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [DeleteResult]
    def servers_server_id_delete(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_delete_with_http_info(server_id, opts)
      data
    end

    # Delete server.
    # Deprovision specific server. Any IP blocks assigned to this server will also be relinquished and deleted. Deprecated: see /servers/{serverId}/actions/deprovision
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResult, Integer, Hash)>] DeleteResult data, response status code and response headers
    def servers_server_id_delete_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_delete ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_delete"
      end
      # resource path
      local_var_path = '/servers/{serverId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get server.
    # Get server properties.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Server]
    def servers_server_id_get(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_get_with_http_info(server_id, opts)
      data
    end

    # Get server.
    # Get server properties.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Server, Integer, Hash)>] Server data, response status code and response headers
    def servers_server_id_get_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_get ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_get"
      end
      # resource path
      local_var_path = '/servers/{serverId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Server'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unassign IP Block from Server.
    # Removes the IP block from the server. <b>No actual configuration is performed on the operating system.</b> BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. <b>This is an advanced network action that can make your server completely unavailable over any network. Make sure this server is reachable over remote console for guaranteed access in case of misconfiguration.</b>
    # @param server_id [String] The server&#39;s ID.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [RelinquishIpBlock] :relinquish_ip_block 
    # @return [String]
    def servers_server_id_ip_blocks_ip_block_id_delete(server_id, ip_block_id, opts = {})
      data, _status_code, _headers = servers_server_id_ip_blocks_ip_block_id_delete_with_http_info(server_id, ip_block_id, opts)
      data
    end

    # Unassign IP Block from Server.
    # Removes the IP block from the server. &lt;b&gt;No actual configuration is performed on the operating system.&lt;/b&gt; BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. &lt;b&gt;This is an advanced network action that can make your server completely unavailable over any network. Make sure this server is reachable over remote console for guaranteed access in case of misconfiguration.&lt;/b&gt;
    # @param server_id [String] The server&#39;s ID.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [RelinquishIpBlock] :relinquish_ip_block 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def servers_server_id_ip_blocks_ip_block_id_delete_with_http_info(server_id, ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_ip_blocks_ip_block_id_delete ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_ip_blocks_ip_block_id_delete"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling ServersApi.servers_server_id_ip_blocks_ip_block_id_delete"
      end
      # resource path
      local_var_path = '/servers/{serverId}/network-configuration/ip-block-configurations/ip-blocks/{ipBlockId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s)).sub('{' + 'ipBlockId' + '}', CGI.escape(ip_block_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'relinquish_ip_block'])

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_ip_blocks_ip_block_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_ip_blocks_ip_block_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign IP Block to Server.
    # Adds an IP block to this server. <b>No actual configuration is performed on the operating system.</b> BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. Knowledge base article to help you can be found <a href='https://phoenixnap.com/kb/configure-server-with-public-ip-block#ftoc-heading-2' target='_blank'>here</a>.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerIpBlock] :server_ip_block 
    # @return [ServerIpBlock]
    def servers_server_id_ip_blocks_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_ip_blocks_post_with_http_info(server_id, opts)
      data
    end

    # Assign IP Block to Server.
    # Adds an IP block to this server. &lt;b&gt;No actual configuration is performed on the operating system.&lt;/b&gt; BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. Knowledge base article to help you can be found &lt;a href&#x3D;&#39;https://phoenixnap.com/kb/configure-server-with-public-ip-block#ftoc-heading-2&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerIpBlock] :server_ip_block 
    # @return [Array<(ServerIpBlock, Integer, Hash)>] ServerIpBlock data, response status code and response headers
    def servers_server_id_ip_blocks_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_ip_blocks_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_ip_blocks_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/network-configuration/ip-block-configurations/ip-blocks'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'server_ip_block'])

      # return_type
      return_type = opts[:debug_return_type] || 'ServerIpBlock'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_ip_blocks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_ip_blocks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch a Server.
    # Any changes to the hostname or description using the BMC API will reflect solely in the BMC API and portal. The changes are intended to keep the BMC data up to date with your server. We do not have access to your server's settings. Local changes to the server's hostname will not be reflected in the API or portal.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerPatch] :server_patch 
    # @return [Server]
    def servers_server_id_patch(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_patch_with_http_info(server_id, opts)
      data
    end

    # Patch a Server.
    # Any changes to the hostname or description using the BMC API will reflect solely in the BMC API and portal. The changes are intended to keep the BMC data up to date with your server. We do not have access to your server&#39;s settings. Local changes to the server&#39;s hostname will not be reflected in the API or portal.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerPatch] :server_patch 
    # @return [Array<(Server, Integer, Hash)>] Server data, response status code and response headers
    def servers_server_id_patch_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_patch ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_patch"
      end
      # resource path
      local_var_path = '/servers/{serverId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'server_patch'])

      # return_type
      return_type = opts[:debug_return_type] || 'Server'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds the server to a private network.
    # Adds the server to a private network. <b>No actual configuration is performed on the operating system.</b> BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. Knowledge base article to help you can be found <a href='https://phoenixnap.com/kb/configure-bmc-server-after-adding-to-network#ftoc-heading-3' target='_blank'>here</a>.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerPrivateNetwork] :server_private_network 
    # @return [ServerPrivateNetwork]
    def servers_server_id_private_networks_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_private_networks_post_with_http_info(server_id, opts)
      data
    end

    # Adds the server to a private network.
    # Adds the server to a private network. &lt;b&gt;No actual configuration is performed on the operating system.&lt;/b&gt; BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. Knowledge base article to help you can be found &lt;a href&#x3D;&#39;https://phoenixnap.com/kb/configure-bmc-server-after-adding-to-network#ftoc-heading-3&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerPrivateNetwork] :server_private_network 
    # @return [Array<(ServerPrivateNetwork, Integer, Hash)>] ServerPrivateNetwork data, response status code and response headers
    def servers_server_id_private_networks_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_private_networks_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_private_networks_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/network-configuration/private-network-configuration/private-networks'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'server_private_network'])

      # return_type
      return_type = opts[:debug_return_type] || 'ServerPrivateNetwork'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_private_networks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_private_networks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes the server from the Public Network
    # Removes the server from the Public Network. <b>No actual configuration is performed on the operating system.</b> BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. <b>This is an advanced network action that can make your server completely unavailable over any network. Make sure this server is reachable over remote console for guaranteed access in case of misconfiguration.</b>
    # @param server_id [String] The server&#39;s ID.
    # @param public_network_id [String] The Public Network identifier.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def servers_server_id_public_networks_delete(server_id, public_network_id, opts = {})
      data, _status_code, _headers = servers_server_id_public_networks_delete_with_http_info(server_id, public_network_id, opts)
      data
    end

    # Removes the server from the Public Network
    # Removes the server from the Public Network. &lt;b&gt;No actual configuration is performed on the operating system.&lt;/b&gt; BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. &lt;b&gt;This is an advanced network action that can make your server completely unavailable over any network. Make sure this server is reachable over remote console for guaranteed access in case of misconfiguration.&lt;/b&gt;
    # @param server_id [String] The server&#39;s ID.
    # @param public_network_id [String] The Public Network identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def servers_server_id_public_networks_delete_with_http_info(server_id, public_network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_public_networks_delete ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_public_networks_delete"
      end
      # verify the required parameter 'public_network_id' is set
      if @api_client.config.client_side_validation && public_network_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_network_id' when calling ServersApi.servers_server_id_public_networks_delete"
      end
      # resource path
      local_var_path = '/servers/{serverId}/network-configuration/public-network-configuration/public-networks/{publicNetworkId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s)).sub('{' + 'publicNetworkId' + '}', CGI.escape(public_network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_public_networks_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_public_networks_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds the server to a Public Network.
    # Adds the server to a Public Network. <b>No actual configuration is performed on the operating system.</b> BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. Knowledge base article to help you can be found <a href='https://phoenixnap.com/kb/configure-bmc-server-after-adding-to-network#ftoc-heading-3' target='_blank'>here</a>.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerPublicNetwork] :server_public_network 
    # @return [ServerPublicNetwork]
    def servers_server_id_public_networks_post(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_public_networks_post_with_http_info(server_id, opts)
      data
    end

    # Adds the server to a Public Network.
    # Adds the server to a Public Network. &lt;b&gt;No actual configuration is performed on the operating system.&lt;/b&gt; BMC configures exclusively the networking devices in the datacenter infrastructure. Manual network configuration changes in the operating system of this server are required. Knowledge base article to help you can be found &lt;a href&#x3D;&#39;https://phoenixnap.com/kb/configure-bmc-server-after-adding-to-network#ftoc-heading-3&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [ServerPublicNetwork] :server_public_network 
    # @return [Array<(ServerPublicNetwork, Integer, Hash)>] ServerPublicNetwork data, response status code and response headers
    def servers_server_id_public_networks_post_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_public_networks_post ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_public_networks_post"
      end
      # resource path
      local_var_path = '/servers/{serverId}/network-configuration/public-network-configuration/public-networks'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'server_public_network'])

      # return_type
      return_type = opts[:debug_return_type] || 'ServerPublicNetwork'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_public_networks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_public_networks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Overwrite tags assigned for Server.
    # Overwrites tags assigned for Server and unassigns any tags not part of the request.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<TagAssignmentRequest>] :tag_assignment_request 
    # @return [Server]
    def servers_server_id_tags_put(server_id, opts = {})
      data, _status_code, _headers = servers_server_id_tags_put_with_http_info(server_id, opts)
      data
    end

    # Overwrite tags assigned for Server.
    # Overwrites tags assigned for Server and unassigns any tags not part of the request.
    # @param server_id [String] The server&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<TagAssignmentRequest>] :tag_assignment_request 
    # @return [Array<(Server, Integer, Hash)>] Server data, response status code and response headers
    def servers_server_id_tags_put_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServersApi.servers_server_id_tags_put ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServersApi.servers_server_id_tags_put"
      end
      # resource path
      local_var_path = '/servers/{serverId}/tags'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'tag_assignment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Server'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ServersApi.servers_server_id_tags_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServersApi#servers_server_id_tags_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
