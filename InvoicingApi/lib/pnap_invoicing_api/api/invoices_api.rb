=begin
#Invoicing API

#List, fetch and pay invoices with the Invoicing API. 

The version of the OpenAPI document: 1.0
Contact: support@phoenixnap.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module InvoicingApi
  class InvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List invoices.
    # List invoices.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :number A user-friendly reference number assigned to the invoice.
    # @option opts [String] :status Payment status of the invoice.
    # @option opts [Time] :sent_on_from Minimum value to filter invoices by sent on date.
    # @option opts [Time] :sent_on_to Maximum value to filter invoices by sent on date.
    # @option opts [Integer] :limit The limit of the number of results returned. The number of records returned may be smaller than the limit. (default to 100)
    # @option opts [Integer] :offset The number of items to skip in the results. (default to 0)
    # @option opts [String] :sort_field If a sortField is requested, pagination will be done after sorting. Default sorting is by number. (default to 'sentOn')
    # @option opts [String] :sort_direction Sort Given Field depending on the desired direction. Default sorting is descending. (default to 'DESC')
    # @return [PaginatedInvoices]
    def invoices_get(opts = {})
      data, _status_code, _headers = invoices_get_with_http_info(opts)
      data
    end

    # List invoices.
    # List invoices.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :number A user-friendly reference number assigned to the invoice.
    # @option opts [String] :status Payment status of the invoice.
    # @option opts [Time] :sent_on_from Minimum value to filter invoices by sent on date.
    # @option opts [Time] :sent_on_to Maximum value to filter invoices by sent on date.
    # @option opts [Integer] :limit The limit of the number of results returned. The number of records returned may be smaller than the limit. (default to 100)
    # @option opts [Integer] :offset The number of items to skip in the results. (default to 0)
    # @option opts [String] :sort_field If a sortField is requested, pagination will be done after sorting. Default sorting is by number. (default to 'sentOn')
    # @option opts [String] :sort_direction Sort Given Field depending on the desired direction. Default sorting is descending. (default to 'DESC')
    # @return [Array<(PaginatedInvoices, Integer, Hash)>] PaginatedInvoices data, response status code and response headers
    def invoices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.invoices_get ...'
      end
      allowable_values = ["PAID", "UNPAID", "OVERDUE", "PAYMENT_PROCESSING"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InvoicesApi.invoices_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InvoicesApi.invoices_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling InvoicesApi.invoices_get, must be greater than or equal to 0.'
      end

      allowable_values = ["number", "sentOn", "dueDate", "amount", "outstandingAmount"]
      if @api_client.config.client_side_validation && opts[:'sort_field'] && !allowable_values.include?(opts[:'sort_field'])
        fail ArgumentError, "invalid value for \"sort_field\", must be one of #{allowable_values}"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort_direction'] && !allowable_values.include?(opts[:'sort_direction'])
        fail ArgumentError, "invalid value for \"sort_direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/invoices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'sentOnFrom'] = opts[:'sent_on_from'] if !opts[:'sent_on_from'].nil?
      query_params[:'sentOnTo'] = opts[:'sent_on_to'] if !opts[:'sent_on_to'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sortField'] = opts[:'sort_field'] if !opts[:'sort_field'].nil?
      query_params[:'sortDirection'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedInvoices'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"InvoicesApi.invoices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#invoices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate invoice details as PDF.
    # Generate invoice details as PDF.
    # @param invoice_id [String] The unique resource identifier of the Invoice.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def invoices_invoice_id_generate_pdf_post(invoice_id, opts = {})
      data, _status_code, _headers = invoices_invoice_id_generate_pdf_post_with_http_info(invoice_id, opts)
      data
    end

    # Generate invoice details as PDF.
    # Generate invoice details as PDF.
    # @param invoice_id [String] The unique resource identifier of the Invoice.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def invoices_invoice_id_generate_pdf_post_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.invoices_invoice_id_generate_pdf_post ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.invoices_invoice_id_generate_pdf_post"
      end
      # resource path
      local_var_path = '/invoices/{invoiceId}/actions/generate-pdf'.sub('{' + 'invoiceId' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"InvoicesApi.invoices_invoice_id_generate_pdf_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#invoices_invoice_id_generate_pdf_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get invoice details.
    # Get invoice details.
    # @param invoice_id [String] The unique resource identifier of the Invoice.
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def invoices_invoice_id_get(invoice_id, opts = {})
      data, _status_code, _headers = invoices_invoice_id_get_with_http_info(invoice_id, opts)
      data
    end

    # Get invoice details.
    # Get invoice details.
    # @param invoice_id [String] The unique resource identifier of the Invoice.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def invoices_invoice_id_get_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.invoices_invoice_id_get ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.invoices_invoice_id_get"
      end
      # resource path
      local_var_path = '/invoices/{invoiceId}'.sub('{' + 'invoiceId' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Invoice'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"InvoicesApi.invoices_invoice_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#invoices_invoice_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pay an invoice.
    # Manually pay an invoice.
    # @param invoice_id [String] The unique resource identifier of the Invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Object]
    def invoices_invoice_id_pay_post(invoice_id, opts = {})
      data, _status_code, _headers = invoices_invoice_id_pay_post_with_http_info(invoice_id, opts)
      data
    end

    # Pay an invoice.
    # Manually pay an invoice.
    # @param invoice_id [String] The unique resource identifier of the Invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def invoices_invoice_id_pay_post_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.invoices_invoice_id_pay_post ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.invoices_invoice_id_pay_post"
      end
      # resource path
      local_var_path = '/invoices/{invoiceId}/actions/pay'.sub('{' + 'invoiceId' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"InvoicesApi.invoices_invoice_id_pay_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#invoices_invoice_id_pay_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
