=begin
#Billing API

#Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

The version of the OpenAPI document: 0.1
Contact: support@phoenixnap.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module BillingAPI
  # Pricing plan details.
  class PricingPlan
    # The SKU identifying this pricing plan.
    attr_accessor :sku

    # Description of this pricing plan.
    attr_accessor :sku_description

    # The code identifying the location.
    attr_accessor :location

    # The pricing model.
    attr_accessor :pricing_model

    # The price per unit.
    attr_accessor :price

    attr_accessor :price_unit

    attr_accessor :applicable_discounts

    # Product code of the product this product is correlated with
    attr_accessor :correlated_product_code

    # Package size per month.
    attr_accessor :package_quantity

    # Package size unit.
    attr_accessor :package_unit

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sku' => :'sku',
        :'sku_description' => :'skuDescription',
        :'location' => :'location',
        :'pricing_model' => :'pricingModel',
        :'price' => :'price',
        :'price_unit' => :'priceUnit',
        :'applicable_discounts' => :'applicableDiscounts',
        :'correlated_product_code' => :'correlatedProductCode',
        :'package_quantity' => :'packageQuantity',
        :'package_unit' => :'packageUnit'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sku' => :'String',
        :'sku_description' => :'String',
        :'location' => :'String',
        :'pricing_model' => :'String',
        :'price' => :'Float',
        :'price_unit' => :'PriceUnitEnum',
        :'applicable_discounts' => :'ApplicableDiscounts',
        :'correlated_product_code' => :'String',
        :'package_quantity' => :'Float',
        :'package_unit' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BillingAPI::PricingPlan` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BillingAPI::PricingPlan`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      else
        self.sku = nil
      end

      if attributes.key?(:'sku_description')
        self.sku_description = attributes[:'sku_description']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      else
        self.location = nil
      end

      if attributes.key?(:'pricing_model')
        self.pricing_model = attributes[:'pricing_model']
      else
        self.pricing_model = nil
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      else
        self.price = nil
      end

      if attributes.key?(:'price_unit')
        self.price_unit = attributes[:'price_unit']
      else
        self.price_unit = nil
      end

      if attributes.key?(:'applicable_discounts')
        self.applicable_discounts = attributes[:'applicable_discounts']
      end

      if attributes.key?(:'correlated_product_code')
        self.correlated_product_code = attributes[:'correlated_product_code']
      end

      if attributes.key?(:'package_quantity')
        self.package_quantity = attributes[:'package_quantity']
      end

      if attributes.key?(:'package_unit')
        self.package_unit = attributes[:'package_unit']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @sku.nil?
        invalid_properties.push('invalid value for "sku", sku cannot be nil.')
      end

      if @location.nil?
        invalid_properties.push('invalid value for "location", location cannot be nil.')
      end

      if @pricing_model.nil?
        invalid_properties.push('invalid value for "pricing_model", pricing_model cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @price_unit.nil?
        invalid_properties.push('invalid value for "price_unit", price_unit cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @sku.nil?
      return false if @location.nil?
      location_validator = EnumAttributeValidator.new('String', ["PHX", "ASH", "NLD", "SGP", "CHI", "SEA", "AUS", "GLOBAL"])
      return false unless location_validator.valid?(@location)
      return false if @pricing_model.nil?
      pricing_model_validator = EnumAttributeValidator.new('String', ["HOURLY", "METERED", "ONE_MONTH_RESERVATION", "TWELVE_MONTHS_RESERVATION", "TWENTY_FOUR_MONTHS_RESERVATION", "THIRTY_SIX_MONTHS_RESERVATION", "MONTHLY_PACKAGE", "FREE_TIER"])
      return false unless pricing_model_validator.valid?(@pricing_model)
      return false if @price.nil?
      return false if @price_unit.nil?
      package_unit_validator = EnumAttributeValidator.new('String', ["GB", "TB"])
      return false unless package_unit_validator.valid?(@package_unit)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(location)
      validator = EnumAttributeValidator.new('String', ["PHX", "ASH", "NLD", "SGP", "CHI", "SEA", "AUS", "GLOBAL"])
      unless validator.valid?(location)
        fail ArgumentError, "invalid value for \"location\", must be one of #{validator.allowable_values}."
      end
      @location = location
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pricing_model Object to be assigned
    def pricing_model=(pricing_model)
      validator = EnumAttributeValidator.new('String', ["HOURLY", "METERED", "ONE_MONTH_RESERVATION", "TWELVE_MONTHS_RESERVATION", "TWENTY_FOUR_MONTHS_RESERVATION", "THIRTY_SIX_MONTHS_RESERVATION", "MONTHLY_PACKAGE", "FREE_TIER"])
      unless validator.valid?(pricing_model)
        fail ArgumentError, "invalid value for \"pricing_model\", must be one of #{validator.allowable_values}."
      end
      @pricing_model = pricing_model
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] package_unit Object to be assigned
    def package_unit=(package_unit)
      validator = EnumAttributeValidator.new('String', ["GB", "TB"])
      unless validator.valid?(package_unit)
        fail ArgumentError, "invalid value for \"package_unit\", must be one of #{validator.allowable_values}."
      end
      @package_unit = package_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sku == o.sku &&
          sku_description == o.sku_description &&
          location == o.location &&
          pricing_model == o.pricing_model &&
          price == o.price &&
          price_unit == o.price_unit &&
          applicable_discounts == o.applicable_discounts &&
          correlated_product_code == o.correlated_product_code &&
          package_quantity == o.package_quantity &&
          package_unit == o.package_unit
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sku, sku_description, location, pricing_model, price, price_unit, applicable_discounts, correlated_product_code, package_quantity, package_unit].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = BillingAPI.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
