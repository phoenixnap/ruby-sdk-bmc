=begin
#Networks API

#Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a>,  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a> and <a href='https://phoenixnap.com/kb/border-gateway-protocol-bmc' target='_blank'>border gateway protocol peer groups</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b> 

The version of the OpenAPI document: 1.0
Contact: support@phoenixnap.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module NetworkApi
  class BGPPeerGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List BGP Peer Groups.
    # List all BGP Peer Groups owned by account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location If present will filter the result by the given location of the BGP Peer Group.
    # @return [Array<BgpPeerGroup>]
    def bgp_peer_groups_get(opts = {})
      data, _status_code, _headers = bgp_peer_groups_get_with_http_info(opts)
      data
    end

    # List BGP Peer Groups.
    # List all BGP Peer Groups owned by account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location If present will filter the result by the given location of the BGP Peer Group.
    # @return [Array<(Array<BgpPeerGroup>, Integer, Hash)>] Array<BgpPeerGroup> data, response status code and response headers
    def bgp_peer_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BGPPeerGroupsApi.bgp_peer_groups_get ...'
      end
      # resource path
      local_var_path = '/bgp-peer-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BgpPeerGroup>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"BGPPeerGroupsApi.bgp_peer_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BGPPeerGroupsApi#bgp_peer_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a BGP Peer Group.
    # Deletes BGP Peer Group by ID.
    # @param bgp_peer_group_id [String] The BGP peer group ID.
    # @param [Hash] opts the optional parameters
    # @return [BgpPeerGroup]
    def bgp_peer_groups_peer_group_id_delete(bgp_peer_group_id, opts = {})
      data, _status_code, _headers = bgp_peer_groups_peer_group_id_delete_with_http_info(bgp_peer_group_id, opts)
      data
    end

    # Delete a BGP Peer Group.
    # Deletes BGP Peer Group by ID.
    # @param bgp_peer_group_id [String] The BGP peer group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpPeerGroup, Integer, Hash)>] BgpPeerGroup data, response status code and response headers
    def bgp_peer_groups_peer_group_id_delete_with_http_info(bgp_peer_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_delete ...'
      end
      # verify the required parameter 'bgp_peer_group_id' is set
      if @api_client.config.client_side_validation && bgp_peer_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_peer_group_id' when calling BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_delete"
      end
      # resource path
      local_var_path = '/bgp-peer-groups/{bgpPeerGroupId}'.sub('{' + 'bgpPeerGroupId' + '}', CGI.escape(bgp_peer_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BgpPeerGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BGPPeerGroupsApi#bgp_peer_groups_peer_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a BGP Peer Group.
    # Retrieves BGP Peer Group by ID.
    # @param bgp_peer_group_id [String] The BGP peer group ID.
    # @param [Hash] opts the optional parameters
    # @return [BgpPeerGroup]
    def bgp_peer_groups_peer_group_id_get(bgp_peer_group_id, opts = {})
      data, _status_code, _headers = bgp_peer_groups_peer_group_id_get_with_http_info(bgp_peer_group_id, opts)
      data
    end

    # Get a BGP Peer Group.
    # Retrieves BGP Peer Group by ID.
    # @param bgp_peer_group_id [String] The BGP peer group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpPeerGroup, Integer, Hash)>] BgpPeerGroup data, response status code and response headers
    def bgp_peer_groups_peer_group_id_get_with_http_info(bgp_peer_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_get ...'
      end
      # verify the required parameter 'bgp_peer_group_id' is set
      if @api_client.config.client_side_validation && bgp_peer_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_peer_group_id' when calling BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_get"
      end
      # resource path
      local_var_path = '/bgp-peer-groups/{bgpPeerGroupId}'.sub('{' + 'bgpPeerGroupId' + '}', CGI.escape(bgp_peer_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BgpPeerGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BGPPeerGroupsApi#bgp_peer_groups_peer_group_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify a BGP Peer Group.
    # Modifies BGP Peer Group by ID.
    # @param bgp_peer_group_id [String] The BGP peer group ID.
    # @param bgp_peer_group_patch [BgpPeerGroupPatch] 
    # @param [Hash] opts the optional parameters
    # @return [BgpPeerGroup]
    def bgp_peer_groups_peer_group_id_patch(bgp_peer_group_id, bgp_peer_group_patch, opts = {})
      data, _status_code, _headers = bgp_peer_groups_peer_group_id_patch_with_http_info(bgp_peer_group_id, bgp_peer_group_patch, opts)
      data
    end

    # Modify a BGP Peer Group.
    # Modifies BGP Peer Group by ID.
    # @param bgp_peer_group_id [String] The BGP peer group ID.
    # @param bgp_peer_group_patch [BgpPeerGroupPatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpPeerGroup, Integer, Hash)>] BgpPeerGroup data, response status code and response headers
    def bgp_peer_groups_peer_group_id_patch_with_http_info(bgp_peer_group_id, bgp_peer_group_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_patch ...'
      end
      # verify the required parameter 'bgp_peer_group_id' is set
      if @api_client.config.client_side_validation && bgp_peer_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_peer_group_id' when calling BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_patch"
      end
      # verify the required parameter 'bgp_peer_group_patch' is set
      if @api_client.config.client_side_validation && bgp_peer_group_patch.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_peer_group_patch' when calling BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_patch"
      end
      # resource path
      local_var_path = '/bgp-peer-groups/{bgpPeerGroupId}'.sub('{' + 'bgpPeerGroupId' + '}', CGI.escape(bgp_peer_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bgp_peer_group_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'BgpPeerGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"BGPPeerGroupsApi.bgp_peer_groups_peer_group_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BGPPeerGroupsApi#bgp_peer_groups_peer_group_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a BGP Peer Group.
    # Create a BGP Peer Group.
    # @param bgp_peer_group_create [BgpPeerGroupCreate] 
    # @param [Hash] opts the optional parameters
    # @return [BgpPeerGroup]
    def bgp_peer_groups_post(bgp_peer_group_create, opts = {})
      data, _status_code, _headers = bgp_peer_groups_post_with_http_info(bgp_peer_group_create, opts)
      data
    end

    # Create a BGP Peer Group.
    # Create a BGP Peer Group.
    # @param bgp_peer_group_create [BgpPeerGroupCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpPeerGroup, Integer, Hash)>] BgpPeerGroup data, response status code and response headers
    def bgp_peer_groups_post_with_http_info(bgp_peer_group_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BGPPeerGroupsApi.bgp_peer_groups_post ...'
      end
      # verify the required parameter 'bgp_peer_group_create' is set
      if @api_client.config.client_side_validation && bgp_peer_group_create.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_peer_group_create' when calling BGPPeerGroupsApi.bgp_peer_groups_post"
      end
      # resource path
      local_var_path = '/bgp-peer-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bgp_peer_group_create)

      # return_type
      return_type = opts[:debug_return_type] || 'BgpPeerGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"BGPPeerGroupsApi.bgp_peer_groups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BGPPeerGroupsApi#bgp_peer_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
