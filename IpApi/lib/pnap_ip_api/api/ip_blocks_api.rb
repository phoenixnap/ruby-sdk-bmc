=begin
#IP Addresses API

#Public IP blocks are a set of contiguous IPs that allow you to access your servers or networks from the internet. Use the IP Addresses API to request and delete IP blocks.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/public-ip-management#bmc-public-ip-allocations-api' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/ips/v1/)</b> 

The version of the OpenAPI document: 1.0
Contact: support@phoenixnap.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module IpApi
  class IPBlocksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List IP Blocks.
    # List all IP Blocks.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag List of tags, in the form tagName.tagValue, to filter by.
    # @return [Array<IpBlock>]
    def ip_blocks_get(opts = {})
      data, _status_code, _headers = ip_blocks_get_with_http_info(opts)
      data
    end

    # List IP Blocks.
    # List all IP Blocks.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag List of tags, in the form tagName.tagValue, to filter by.
    # @return [Array<(Array<IpBlock>, Integer, Hash)>] Array<IpBlock> data, response status code and response headers
    def ip_blocks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.ip_blocks_get ...'
      end
      # resource path
      local_var_path = '/ip-blocks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<IpBlock>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"IPBlocksApi.ip_blocks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#ip_blocks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete IP Block.
    # Delete an IP Block. An IP Block can only be deleted if not assigned to any resource.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @return [DeleteIpBlockResult]
    def ip_blocks_ip_block_id_delete(ip_block_id, opts = {})
      data, _status_code, _headers = ip_blocks_ip_block_id_delete_with_http_info(ip_block_id, opts)
      data
    end

    # Delete IP Block.
    # Delete an IP Block. An IP Block can only be deleted if not assigned to any resource.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteIpBlockResult, Integer, Hash)>] DeleteIpBlockResult data, response status code and response headers
    def ip_blocks_ip_block_id_delete_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.ip_blocks_ip_block_id_delete ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.ip_blocks_ip_block_id_delete"
      end
      # resource path
      local_var_path = '/ip-blocks/{ipBlockId}'.sub('{' + 'ipBlockId' + '}', CGI.escape(ip_block_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteIpBlockResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"IPBlocksApi.ip_blocks_ip_block_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#ip_blocks_ip_block_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IP Block.
    # Get IP Block.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @return [IpBlock]
    def ip_blocks_ip_block_id_get(ip_block_id, opts = {})
      data, _status_code, _headers = ip_blocks_ip_block_id_get_with_http_info(ip_block_id, opts)
      data
    end

    # Get IP Block.
    # Get IP Block.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpBlock, Integer, Hash)>] IpBlock data, response status code and response headers
    def ip_blocks_ip_block_id_get_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.ip_blocks_ip_block_id_get ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.ip_blocks_ip_block_id_get"
      end
      # resource path
      local_var_path = '/ip-blocks/{ipBlockId}'.sub('{' + 'ipBlockId' + '}', CGI.escape(ip_block_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IpBlock'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"IPBlocksApi.ip_blocks_ip_block_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#ip_blocks_ip_block_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update IP block.
    # Update IP Block's details.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [IpBlockPatch] :ip_block_patch 
    # @return [IpBlock]
    def ip_blocks_ip_block_id_patch(ip_block_id, opts = {})
      data, _status_code, _headers = ip_blocks_ip_block_id_patch_with_http_info(ip_block_id, opts)
      data
    end

    # Update IP block.
    # Update IP Block&#39;s details.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [IpBlockPatch] :ip_block_patch 
    # @return [Array<(IpBlock, Integer, Hash)>] IpBlock data, response status code and response headers
    def ip_blocks_ip_block_id_patch_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.ip_blocks_ip_block_id_patch ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.ip_blocks_ip_block_id_patch"
      end
      # resource path
      local_var_path = '/ip-blocks/{ipBlockId}'.sub('{' + 'ipBlockId' + '}', CGI.escape(ip_block_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ip_block_patch'])

      # return_type
      return_type = opts[:debug_return_type] || 'IpBlock'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"IPBlocksApi.ip_blocks_ip_block_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#ip_blocks_ip_block_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Overwrite tags assigned for IP Block.
    # Overwrites tags assigned for IP Block and unassigns any tags not part of the request.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<TagAssignmentRequest>] :tag_assignment_request 
    # @return [IpBlock]
    def ip_blocks_ip_block_id_tags_put(ip_block_id, opts = {})
      data, _status_code, _headers = ip_blocks_ip_block_id_tags_put_with_http_info(ip_block_id, opts)
      data
    end

    # Overwrite tags assigned for IP Block.
    # Overwrites tags assigned for IP Block and unassigns any tags not part of the request.
    # @param ip_block_id [String] The IP Block identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<TagAssignmentRequest>] :tag_assignment_request 
    # @return [Array<(IpBlock, Integer, Hash)>] IpBlock data, response status code and response headers
    def ip_blocks_ip_block_id_tags_put_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.ip_blocks_ip_block_id_tags_put ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.ip_blocks_ip_block_id_tags_put"
      end
      # resource path
      local_var_path = '/ip-blocks/{ipBlockId}/tags'.sub('{' + 'ipBlockId' + '}', CGI.escape(ip_block_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'tag_assignment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'IpBlock'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"IPBlocksApi.ip_blocks_ip_block_id_tags_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#ip_blocks_ip_block_id_tags_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an IP Block.
    # Request an IP Block. An IP Block is a set of contiguous IPs that can be assigned to other resources such as servers.
    # @param [Hash] opts the optional parameters
    # @option opts [IpBlockCreate] :ip_block_create 
    # @return [IpBlock]
    def ip_blocks_post(opts = {})
      data, _status_code, _headers = ip_blocks_post_with_http_info(opts)
      data
    end

    # Create an IP Block.
    # Request an IP Block. An IP Block is a set of contiguous IPs that can be assigned to other resources such as servers.
    # @param [Hash] opts the optional parameters
    # @option opts [IpBlockCreate] :ip_block_create 
    # @return [Array<(IpBlock, Integer, Hash)>] IpBlock data, response status code and response headers
    def ip_blocks_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.ip_blocks_post ...'
      end
      # resource path
      local_var_path = '/ip-blocks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ip_block_create'])

      # return_type
      return_type = opts[:debug_return_type] || 'IpBlock'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"IPBlocksApi.ip_blocks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#ip_blocks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
