=begin
#Billing API

#Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

The version of the OpenAPI document: 0.1
Contact: support@phoenixnap.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module BillingApi
  class ReservationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all Reservations.
    # Retrieves all reservations associated with the authenticated account. All date & times are in UTC.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationProductCategoryEnum] :product_category The product category
    # @return [Array<Reservation>]
    def reservations_get(opts = {})
      data, _status_code, _headers = reservations_get_with_http_info(opts)
      data
    end

    # List all Reservations.
    # Retrieves all reservations associated with the authenticated account. All date &amp; times are in UTC.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationProductCategoryEnum] :product_category The product category
    # @return [Array<(Array<Reservation>, Integer, Hash)>] Array<Reservation> data, response status code and response headers
    def reservations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationsApi.reservations_get ...'
      end
      # resource path
      local_var_path = '/reservations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'productCategory'] = opts[:'product_category'] if !opts[:'product_category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reservation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ReservationsApi.reservations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationsApi#reservations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a reservation.
    # Creates new package reservation for authenticated account.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationRequest] :reservation_request 
    # @return [Reservation]
    def reservations_post(opts = {})
      data, _status_code, _headers = reservations_post_with_http_info(opts)
      data
    end

    # Create a reservation.
    # Creates new package reservation for authenticated account.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationRequest] :reservation_request 
    # @return [Array<(Reservation, Integer, Hash)>] Reservation data, response status code and response headers
    def reservations_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationsApi.reservations_post ...'
      end
      # resource path
      local_var_path = '/reservations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'reservation_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Reservation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ReservationsApi.reservations_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationsApi#reservations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable auto-renewal for reservation by id.
    # Disable auto-renewal for reservation by reservation id.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationAutoRenewDisableRequest] :reservation_auto_renew_disable_request 
    # @return [Reservation]
    def reservations_reservation_id_actions_auto_renew_disable_post(id, opts = {})
      data, _status_code, _headers = reservations_reservation_id_actions_auto_renew_disable_post_with_http_info(id, opts)
      data
    end

    # Disable auto-renewal for reservation by id.
    # Disable auto-renewal for reservation by reservation id.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationAutoRenewDisableRequest] :reservation_auto_renew_disable_request 
    # @return [Array<(Reservation, Integer, Hash)>] Reservation data, response status code and response headers
    def reservations_reservation_id_actions_auto_renew_disable_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationsApi.reservations_reservation_id_actions_auto_renew_disable_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReservationsApi.reservations_reservation_id_actions_auto_renew_disable_post"
      end
      # resource path
      local_var_path = '/reservations/{id}/actions/auto-renew/disable'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'reservation_auto_renew_disable_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Reservation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ReservationsApi.reservations_reservation_id_actions_auto_renew_disable_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationsApi#reservations_reservation_id_actions_auto_renew_disable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable auto-renewal for unexpired reservation by reservation id.
    # Enable auto-renewal for unexpired reservation by reservation id.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @return [Reservation]
    def reservations_reservation_id_actions_auto_renew_enable_post(id, opts = {})
      data, _status_code, _headers = reservations_reservation_id_actions_auto_renew_enable_post_with_http_info(id, opts)
      data
    end

    # Enable auto-renewal for unexpired reservation by reservation id.
    # Enable auto-renewal for unexpired reservation by reservation id.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reservation, Integer, Hash)>] Reservation data, response status code and response headers
    def reservations_reservation_id_actions_auto_renew_enable_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationsApi.reservations_reservation_id_actions_auto_renew_enable_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReservationsApi.reservations_reservation_id_actions_auto_renew_enable_post"
      end
      # resource path
      local_var_path = '/reservations/{id}/actions/auto-renew/enable'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Reservation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ReservationsApi.reservations_reservation_id_actions_auto_renew_enable_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationsApi#reservations_reservation_id_actions_auto_renew_enable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert reservation pricing model by reservation ID.
    # Convert reservation pricing model by reservation id.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationRequest] :reservation_request 
    # @return [Reservation]
    def reservations_reservation_id_actions_convert_post(id, opts = {})
      data, _status_code, _headers = reservations_reservation_id_actions_convert_post_with_http_info(id, opts)
      data
    end

    # Convert reservation pricing model by reservation ID.
    # Convert reservation pricing model by reservation id.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @option opts [ReservationRequest] :reservation_request 
    # @return [Array<(Reservation, Integer, Hash)>] Reservation data, response status code and response headers
    def reservations_reservation_id_actions_convert_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationsApi.reservations_reservation_id_actions_convert_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReservationsApi.reservations_reservation_id_actions_convert_post"
      end
      # resource path
      local_var_path = '/reservations/{id}/actions/convert'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'reservation_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Reservation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ReservationsApi.reservations_reservation_id_actions_convert_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationsApi#reservations_reservation_id_actions_convert_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a reservation.
    # Retrieves the reservations with the specified identifier. All date & times are in UTC.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @return [Reservation]
    def reservations_reservation_id_get(id, opts = {})
      data, _status_code, _headers = reservations_reservation_id_get_with_http_info(id, opts)
      data
    end

    # Get a reservation.
    # Retrieves the reservations with the specified identifier. All date &amp; times are in UTC.
    # @param id [String] Resource id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reservation, Integer, Hash)>] Reservation data, response status code and response headers
    def reservations_reservation_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationsApi.reservations_reservation_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReservationsApi.reservations_reservation_id_get"
      end
      # resource path
      local_var_path = '/reservations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Reservation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ReservationsApi.reservations_reservation_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationsApi#reservations_reservation_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
