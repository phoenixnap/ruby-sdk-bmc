=begin
#Billing API

#Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

The version of the OpenAPI document: 0.1
Contact: support@phoenixnap.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module BillingApi
  class RatedUsageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List the rated usage.
    # Retrieves all rated usage for given time period. The information is presented as a list of rated usage records. Every record corresponds to a charge. All date & times are in UTC.
    # @param from_year_month [String] From year month (inclusive) to filter rated usage records by.
    # @param to_year_month [String] To year month (inclusive) to filter rated usage records by.
    # @param [Hash] opts the optional parameters
    # @option opts [ProductCategoryEnum] :product_category The product category
    # @return [Array<RatedUsageGet200ResponseInner>]
    def rated_usage_get(from_year_month, to_year_month, opts = {})
      data, _status_code, _headers = rated_usage_get_with_http_info(from_year_month, to_year_month, opts)
      data
    end

    # List the rated usage.
    # Retrieves all rated usage for given time period. The information is presented as a list of rated usage records. Every record corresponds to a charge. All date &amp; times are in UTC.
    # @param from_year_month [String] From year month (inclusive) to filter rated usage records by.
    # @param to_year_month [String] To year month (inclusive) to filter rated usage records by.
    # @param [Hash] opts the optional parameters
    # @option opts [ProductCategoryEnum] :product_category The product category
    # @return [Array<(Array<RatedUsageGet200ResponseInner>, Integer, Hash)>] Array<RatedUsageGet200ResponseInner> data, response status code and response headers
    def rated_usage_get_with_http_info(from_year_month, to_year_month, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatedUsageApi.rated_usage_get ...'
      end
      # verify the required parameter 'from_year_month' is set
      if @api_client.config.client_side_validation && from_year_month.nil?
        fail ArgumentError, "Missing the required parameter 'from_year_month' when calling RatedUsageApi.rated_usage_get"
      end
      # verify the required parameter 'to_year_month' is set
      if @api_client.config.client_side_validation && to_year_month.nil?
        fail ArgumentError, "Missing the required parameter 'to_year_month' when calling RatedUsageApi.rated_usage_get"
      end
      # resource path
      local_var_path = '/rated-usage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromYearMonth'] = from_year_month
      query_params[:'toYearMonth'] = to_year_month
      query_params[:'productCategory'] = opts[:'product_category'] if !opts[:'product_category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RatedUsageGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"RatedUsageApi.rated_usage_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatedUsageApi#rated_usage_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the rated usage records for the current calendar month.
    # Retrieves all rated usage for the current calendar month. The information is presented as a list of rated usage records. Every record corresponds to a charge. All date & times are in UTC.
    # @param [Hash] opts the optional parameters
    # @option opts [ProductCategoryEnum] :product_category The product category
    # @return [Array<RatedUsageGet200ResponseInner>]
    def rated_usage_month_to_date_get(opts = {})
      data, _status_code, _headers = rated_usage_month_to_date_get_with_http_info(opts)
      data
    end

    # List the rated usage records for the current calendar month.
    # Retrieves all rated usage for the current calendar month. The information is presented as a list of rated usage records. Every record corresponds to a charge. All date &amp; times are in UTC.
    # @param [Hash] opts the optional parameters
    # @option opts [ProductCategoryEnum] :product_category The product category
    # @return [Array<(Array<RatedUsageGet200ResponseInner>, Integer, Hash)>] Array<RatedUsageGet200ResponseInner> data, response status code and response headers
    def rated_usage_month_to_date_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatedUsageApi.rated_usage_month_to_date_get ...'
      end
      # resource path
      local_var_path = '/rated-usage/month-to-date'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'productCategory'] = opts[:'product_category'] if !opts[:'product_category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RatedUsageGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"RatedUsageApi.rated_usage_month_to_date_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatedUsageApi#rated_usage_month_to_date_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
